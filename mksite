#!/usr/bin/env python3

import chevron  # mustache
import markdown
import os
import shutil
import sys
import toml

class Site(object):
    def __init__(self, fname):
        try:
            with open(fname, 'r') as f:
                self.cfg = toml.load(f)
        except FileNotFoundError:
            self.cfg = {}
        mksite_dir = os.environ['MKSITE_DIR']
        if mksite_dir:
            self.init_dir = os.path.join(mksite_dir, 'init')
        else:
            raise Exception('MKSITE_DIR not found in environment')
        self.site_dir = '.'
        self.build_dir = os.path.join(self.site_dir, 'build')


    # Copy a file from src_path to dst_path
    def copy_file(self, src_path, dst_path):
        # copy2 preserves mod dates, which is essential for this tool
        shutil.copy2(src_path, dst_path)
        print('cp ' + src_path + ' ' + dst_path)


    # Create given directory
    def make_dir(self, dir_name):
        dir_path = os.path.join(self.site_dir, dir_name)
        if not os.path.isdir(dir_path):
            print(f'mkdir {dir_path}')
            os.mkdir(dir_path)


    # Copy boilerplate files into new site dir
    def init(self):
        for fname in os.listdir(self.init_dir):
            src_path = os.path.join(self.init_dir, fname)
            dst_path = os.path.join(self.site_dir, fname)
            if self.newer_file(src_path, dst_path):
                self.copy_file(src_path, dst_path)


    # Is src_path newer than dst_path?
    def newer_file(self, src_path, dst_path):
        if not os.path.exists(src_path):
            return False
        if not os.path.isfile(dst_path) or \
            (os.path.getmtime(src_path) > os.path.getmtime(dst_path)):
                return True
        return False


    # For a given source file in the site, make the path which corresponds
    # to its target in the 'build' directory
    def build_path(self, dst_fname):
        return os.path.join(self.build_dir, dst_fname)


    # For a given source path, return the path to its build target
    def make_dst_path(self, src_path):
        fname = os.path.split(src_path)[1]
        base_ext = os.path.splitext(fname)
        if base_ext[1] == '.md':
            # foo.md generates build/foo.html
            return self.build_path(base_ext[0] + '.html')
        elif base_ext[1] == '.mustache':
            # foo.md.mustache generates build/foo.md
            # foo.html.mustache generates build/foo.html
            return self.build_path(base_ext[0])
        else:
            return self.build_path(fname)
        

    # For a given .mustache file, return the path to the .toml file containing 
    # the values to be templated into the output file
    def make_toml_path(self, src_path):
        # handles both foo.html and foo.html.mustache
        base = os.path.splitext(os.path.splitext(src_path)[0])[0]
        return os.path.join(self.site_dir, base + '.toml')


    def build_markdown(self, src_path, dst_path):
        args = {
            'input': src_path,
            'output': dst_path,
            'extensions': ['codehilite', 'tables', 'attr_list'],
            'extension_configs': {
                'codehilite': {
                    'linenums': 'True'
                }
            },
        }
        print(f'markdown {src_path} {dst_path}')
        markdown.markdownFromFile(**args)


    def build_rows(self, src_path):
        rows = []
        base = os.path.splitext(os.path.splitext(src_path)[0])[0]
        rows_path = os.path.join(self.site_dir, base + '.rows')
        if os.path.isdir(rows_path) and self.newer_file(rows_path, src_path):
            for fname in os.listdir(rows_path):
                row_path = os.path.join(rows_path, fname)
                with open(row_path, 'r') as row_file:
                    rows.append(toml.load(row_file))
        return rows
        

    def build_mustache(self, src_path, dst_path):
        toml_path = self.make_toml_path(src_path)
        try:
            # for foo.html.mustache look for foo.toml
            with open(toml_path, 'r') as toml_file:
                values = toml.load(toml_file)
        except FileNotFoundError:
            # look for foo.rows/
            values = {
                'timeline': self.build_rows(src_path)
            }

        with open(src_path) as src_file:
            print(f'chevron {src_path} {dst_path}')
            with open(dst_path, 'w') as dst_file:
                dst_file.write(chevron.render(src_file, values))
            

    # Check dst newer than src. Ignore files which aren't published
    def needs_built(self, src_path, dst_path):
        ext = os.path.splitext(src_path)[1]
        if os.path.isdir(src_path):
            return False
        if ext == '.toml':
            return False
        if ext == '.mustache':
            # chevron output depends on both the .mustache file
            # and the .toml file containing template values
            toml_path = self.make_toml_path(src_path)
            if self.newer_file(toml_path, dst_path):
                return True
        if not self.newer_file(src_path, dst_path):
            return False
        return True


    def build_one_dir(self, dir_name):
        for fname in os.listdir(dir_name):
            src_path = os.path.join(dir_name, fname)
            dst_path = self.make_dst_path(src_path)
            if not self.needs_built(src_path, dst_path):
                continue
            ext = os.path.splitext(src_path)[1]
            if ext == '.mustache':
                self.build_mustache(src_path, dst_path)
            elif ext == '.md':
                self.build_markdown(src_path, dst_path)
            else:
                self.copy_file(src_path, dst_path)


    # Translate source files into the build directory
    def build(self):
        self.make_dir('build')
        self.build_one_dir(self.site_dir)
        # Call it again for build/foo.md -> build/foo.html
        self.build_one_dir(self.build_dir)


    # Publish build directory to network location
    def publish(self):
        pass


def usage():
    print('Usage: mksite <action> where action may be init, build, or publish')
    exit(-1)


def main():
    if len(sys.argv) == 1:
        usage()
    action = sys.argv[1]
    site = Site('mksite.toml')
    
    if action == 'init':
        site.init()
    elif action == 'build':
        site.build()
    elif action == 'publish':
        site.publish()
    else:
        usage()


if __name__ == '__main__':
    main()
